name: Repo Health

on:
  push:
    branches: [ main, ci/* ]
  schedule:
    - cron: '17 5 * * 1'  # Mondays 05:17 UTC (morning SAST)
  workflow_dispatch:
    inputs:
      strict:
        type: boolean
        default: false
        description: 'Fail the job when warnings are present'
      update_issue:
        type: boolean
        default: true
        description: 'Create/update the "Repo Health" issue'

jobs:
  health:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # We want to always create/update the issue even if the script signals red,
      # so we capture the exit code and fail at the end.
      - name: Generate health report
        id: report
        run: |
          set +e
          python -m pip install --upgrade pip
          python scripts/health_report.py --out health.md $([ "${{ github.event.inputs.strict }}" = "true" ] && echo "--strict")
          code=$?
          echo "exit_code=$code" >> "$GITHUB_OUTPUT"
          echo "Script exit code: $code"
          set -e

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-health
          path: health.md

      - name: Add report to job summary
        if: always()
        run: |
          echo "## Repo Health Report" >> "$GITHUB_STEP_SUMMARY"
          cat health.md >> "$GITHUB_STEP_SUMMARY"

      - name: Create or update 'Repo Health' issue
        if: ${{ steps.report.outputs.exit_code != '0' || github.event.inputs.update_issue == 'true' || github.event_name == 'schedule' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('health.md', 'utf8');
            const { owner, repo } = context.repo;
            const title = 'Repo Health';
            const labels = ['automation','health'];

            const issues = await github.paginate(
              github.rest.issues.listForRepo,
              { owner, repo, state: 'open', per_page: 100 }
            );
            const existing = issues.find(i => i.title === title);

            if (existing) {
              await github.rest.issues.update({ owner, repo, issue_number: existing.number, title, body });
              await github.rest.issues.setLabels({ owner, repo, issue_number: existing.number, labels });
              core.setOutput('issue-number', String(existing.number));
            } else {
              const created = await github.rest.issues.create({ owner, repo, title, body, labels });
              core.setOutput('issue-number', String(created.data.number));
            }

      - name: Fail if health is red (only when strict=true)
        if: ${{ steps.report.outputs.exit_code != '0' && github.event.inputs.strict == 'true' }}
        run: exit 1

