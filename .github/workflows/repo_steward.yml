name: Repo Steward

on:
  workflow_dispatch:
    inputs:
      tools_filter:
        description: "Comma-separated tool KEYS from tools.yaml (e.g. hello,notes) â€” optional"
        type: string
        default: ""
      strict:
        description: "Fail job when health has warnings"
        type: boolean
        default: false
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  schedule:
    - cron: '23 4 * * 1'  # Mondays 04:23 UTC

permissions:
  contents: write
  issues: write

concurrency:
  group: repo-steward-${{ github.ref }}
  cancel-in-progress: true

jobs:
  steward:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect branch name
        id: branch
        run: |
          if [ -n "$GITHUB_HEAD_REF" ]; then
            echo "name=$GITHUB_HEAD_REF" >> "$GITHUB_OUTPUT"
          else
            echo "name=$GITHUB_REF_NAME" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install project (best-effort)
        run: |
          python -m pip install --upgrade pip
          if [ -f pyproject.toml ]; then
            pip install -e .
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Ensure streamlit is available for tools that import it
          python - <<'PY'
          import importlib.util, subprocess, sys
          if importlib.util.find_spec("streamlit") is None:
              subprocess.check_call([sys.executable, "-m", "pip", "install", "streamlit"])
          PY

      - name: Add repo root and src to PYTHONPATH
        run: |
          echo "PYTHONPATH=${PYTHONPATH}:$(pwd)" >> "$GITHUB_ENV"
          if [ -d "src" ]; then
            echo "PYTHONPATH=${PYTHONPATH}:$(pwd)/src" >> "$GITHUB_ENV"
          fi

      - name: Run Smoke (Imports)
        env:
          CI_SMOKE: "1"
          TOOLS_FILTER: ${{ inputs.tools_filter }}
        run: |
          if [ -f scripts/smoke_tools.py ]; then
            python scripts/smoke_tools.py
          else
            python scripts/test_imports.py --allow-empty
          fi

      - name: Generate Repo Health report
        id: health
        run: |
          set +e
          python scripts/health_report.py --out health.md $([ "${{ inputs.strict }}" = "true" ] && echo "--strict")
          echo "exit_code=$?" >> "$GITHUB_OUTPUT"
          set -e

      - name: Upload health artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-health
          path: health.md

      - name: Create/Update 'Repo Health' issue
        if: ${{ steps.health.outputs.exit_code != '0' || github.event_name == 'schedule' || github.event_name == 'push' || github.event_name == 'pull_request' }}
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('health.md', 'utf8');
            const { owner, repo } = context.repo;
            const title = 'Repo Health';
            const labels = ['automation','health'];
            const { data: issues } = await github.rest.issues.listForRepo({ owner, repo, state: 'open', per_page: 100 });
            const existing = issues.find(i => i.title === title);
            if (existing) {
              await github.rest.issues.update({ owner, repo, issue_number: existing.number, title, body });
              await github.rest.issues.setLabels({ owner, repo, issue_number: existing.number, labels });
            } else {
              await github.rest.issues.create({ owner, repo, title, body, labels });
            }

      - name: Fail if health is red (only when strict=true)
        if: ${{ steps.health.outputs.exit_code != '0' && inputs.strict == true }}
        run: exit 1
