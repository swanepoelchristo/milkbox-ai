name: ChatOps

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write
  discussions: read
  actions: read

jobs:
  chatops:
    if: github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/')
    runs-on: ubuntu-latest

    concurrency:
      group: chatops-${{ github.repository }}-${{ github.event.issue.number || github.event.pull_request.number || 'na' }}
      cancel-in-progress: false

    env:
      REPO: ${{ github.repository }}
      OWNER: ${{ github.repository_owner }}
      DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
      CHATOPS_TOKEN: ${{ secrets.CHATOPS_TOKEN }}
      COMMENT_BODY: ${{ github.event.comment.body }}
      AUTHOR_ASSOC: ${{ github.event.comment.author_association }}

    steps:
      - name: Authorize caller (owner/member/collaborator only)
        run: |
          case "${AUTHOR_ASSOC}" in
            OWNER|MEMBER|COLLABORATOR) echo "Authorized";;
            *) echo "Not authorized: ${AUTHOR_ASSOC}"; exit 1;;
          esac

      - name: Checkout default branch (full history; no auto-creds)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.DEFAULT_BRANCH }}
          fetch-depth: 0
          persist-credentials: false

      - name: Use PAT for pushes (origin uses CHATOPS_TOKEN)
        run: |
          git config user.name  "milkbox-ai-bot"
          git config user.email "ai@milkyroadscheese.com"
          git remote set-url origin "https://x-access-token:${CHATOPS_TOKEN}@github.com/${REPO}.git"

      # -------------------------------
      # /bootstrap-ci
      # -------------------------------
      - name: Bootstrap CI (create files & PR branch)
        if: contains(env.COMMENT_BODY, '/bootstrap-ci')
        run: |
          set -euo pipefail
          mkdir -p .github/workflows

          cat > .github/workflows/ci.yml <<'YAML'
          name: CI
          on:
            pull_request:
              types: [opened, synchronize, reopened, ready_for_review]
            push:
              branches: [main]
            workflow_dispatch:
          permissions:
            contents: read
          jobs:
            smoke:
              name: Smoke (Imports)
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - name: Sanity ping
                  run: echo "✅ Smoke check running"
                - name: Detect Node project
                  id: detect_node
                  run: |
                    if [ -f package.json ]; then
                      echo "node_project=true" >> "$GITHUB_OUTPUT"
                    else
                      echo "node_project=false" >> "$GITHUB_OUTPUT"
                    fi
                - name: Setup Node
                  if: steps.detect_node.outputs.node_project == 'true'
                  uses: actions/setup-node@v4
                  with:
                    node-version: '20'
                    cache: 'npm'
                - name: Install deps (Node)
                  if: steps.detect_node.outputs.node_project == 'true'
                  run: |
                    if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
                      npm ci
                    else
                      npm install
                    fi
                - name: Lint (if present)
                  if: steps.detect_node.outputs.node_project == 'true'
                  run: npm run --if-present lint
                - name: Build (if present)
                  if: steps.detect_node.outputs.node_project == 'true'
                  run: npm run --if-present build

            repo_health:
              name: Repo Health
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - name: Basic repo checks
                  run: |
                    set -e
                    test -f CODEOWNERS || { echo "❌ Missing CODEOWNERS at repo root"; exit 1; }
                    echo "✅ CODEOWNERS present"
                - uses: actions/setup-python@v5
                  with:
                    python-version: '3.x'
                - name: Install pre-commit
                  run: pip install pre-commit
                - name: Run pre-commit
                  run: pre-commit run --all-files --show-diff-on-failure
          YAML

          cat > .pre-commit-config.yaml <<'YAML'
          repos:
            - repo: https://github.com/pre-commit/pre-commit-hooks
              rev: v4.6.0
              hooks:
                - id: trailing-whitespace
                - id: end-of-file-fixer
                - id: mixed-line-ending
                - id: check-yaml
                - id: check-json
                - id: check-added-large-files
            - repo: https://github.com/astral-sh/ruff-pre-commit
              rev: v0.6.2
              hooks:
                - id: ruff
                  args: [--fix]
            - repo: https://github.com/pre-commit/mirrors-prettier
              rev: v3.3.3
              hooks:
                - id: prettier
          YAML

          mkdir -p .github
          cat > .github/dependabot.yml <<'YAML'
          version: 2
          updates:
            - package-ecosystem: "github-actions"
              directory: "/"
              schedule:
                interval: "weekly"
            - package-ecosystem: "npm"
              directory: "/"
              schedule:
                interval: "weekly"
          YAML

          cat > .github/workflows/auto-merge-dependabot.yml <<'YAML'
          name: Auto-merge Dependabot
          on:
            pull_request_target:
              types: [opened, synchronize, reopened, ready_for_review]
          permissions:
            contents: write
            pull-requests: write
          jobs:
            enable-auto-merge:
              if: github.actor == 'dependabot[bot]'
              runs-on: ubuntu-latest
              steps:
                - name: Fetch metadata
                  id: meta
                  uses: dependabot/fetch-metadata@v2
                - name: Enable auto-merge (squash)
                  if: steps.meta.outputs.update-type != 'version-update:semver-major'
                  uses: peter-evans/enable-pull-request-automerge@v3
                  with:
                    merge-method: squash
          YAML

          git switch -C bot/bootstrap-ci
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit (bootstrap files already present)."
          else
            git commit -m "ci: bootstrap CI (Smoke & Repo Health), pre-commit, Dependabot, auto-merge"
          fi
          git push -u origin bot/bootstrap-ci

      - name: Open PR for bootstrap
        if: contains(env.COMMENT_BODY, '/bootstrap-ci')
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ github.token }}
          base: ${{ env.DEFAULT_BRANCH }}
          branch: bot/bootstrap-ci
          title: "ci: register 'Smoke (Imports)' & 'Repo Health'; add pre-commit + Dependabot"
          body: |
            This PR was opened by **ChatOps**.

            **Adds**
            - Named checks: **Smoke (Imports)** and **Repo Health**
            - `.pre-commit-config.yaml`
            - Dependabot (actions + npm)
            - Auto-merge for Dependabot (non-major)

      # -------------------------------
      # /set-required-checks
      # -------------------------------
      - name: Set branch protection (main)
        if: contains(env.COMMENT_BODY, '/set-required-checks')
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.CHATOPS_TOKEN }}
          script: |
            const owner  = context.repo.owner;
            const repo   = context.repo.repo;
            const branch = context.payload.repository.default_branch || 'main';
            // Use the exact check-run names shown on PRs
            await github.request('PUT /repos/{owner}/{repo}/branches/{branch}/protection', {
              owner, repo, branch,
              required_status_checks: {
                strict: true,
                contexts: ['Smoke (Imports) / smoke (pull_request)', 'Repo Health / health (pull_request)'],
              },
              enforce_admins: false,
              required_pull_request_reviews: { required_approving_review_count: 1 },
              restrictions: null
            });

      # -------------------------------
      # /open-test-pr (idempotent, keep ONE PR, comment back)
      # -------------------------------
      - name: Prepare bot/test-pr from origin/main (always reset)
        if: contains(env.COMMENT_BODY, '/open-test-pr')
        run: |
          set -euo pipefail
          git fetch origin --prune
          git checkout -B bot/test-pr "origin/${DEFAULT_BRANCH}"
          mkdir -p .github
          echo "Refreshed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" > .github/test-pr.txt
          git add .github/test-pr.txt
          git commit -m "chore(test-pr): refresh automated test PR" || true

      - name: Push branch (force-with-lease; retry; avoid deleting if an open PR exists)
        if: contains(env.COMMENT_BODY, '/open-test-pr')
        env:
          GH_TOKEN: ${{ env.CHATOPS_TOKEN }}
        run: |
          set -euo pipefail
          git fetch origin --prune
          if git push --force-with-lease origin HEAD:bot/test-pr; then
            echo "PUSHED=1" >> $GITHUB_ENV
          else
            echo "First push failed; checking if an open PR exists…"
            open_pr=$(gh pr list --head bot/test-pr --state open --json number -q '.[0].number' || true)
            if [ -n "$open_pr" ]; then
              echo "Open PR #$open_pr exists; NOT deleting branch. Refetch and retry…"
              git fetch origin --prune
              git push --force-with-lease origin HEAD:bot/test-pr
              echo "PUSHED=1" >> $GITHUB_ENV
            else
              echo "No open PR; deleting remote ref as fallback and retrying…"
              gh api --method DELETE repos/${REPO}/git/refs/heads/bot/test-pr || true
              git fetch origin --prune
              git push --force-with-lease origin HEAD:bot/test-pr
              echo "PUSHED=1" >> $GITHUB_ENV
            fi
          fi

      - name: Create or update PR (keep single PR)
        if: contains(env.COMMENT_BODY, '/open-test-pr')
        env:
          GH_TOKEN: ${{ env.CHATOPS_TOKEN }}
        run: |
          set -euo pipefail
          num=$(gh pr list --head bot/test-pr --state open --json number -q '.[0].number' || true)
          if [ -n "$num" ]; then
            gh pr edit "$num" --title "Test PR (bot)" --body "Automated test PR refreshed by ChatOps."
          else
            num=$(gh pr create --title "Test PR (bot)" --body "Automated test PR from ChatOps." --base "${DEFAULT_BRANCH}" --head bot/test-pr --json number -q .number)
          fi
          echo "PR_NUMBER=$num" >> $GITHUB_ENV
          url=$(gh pr view "$num" --json url -q .url)
          echo "PR_URL=$url" >> $GITHUB_ENV
          echo "Opened/updated PR #$num: $url"

      - name: Comment result back to this issue
        if: contains(env.COMMENT_BODY, '/open-test-pr')
        env:
          GH_TOKEN: ${{ env.CHATOPS_TOKEN }}
        run: |
          issue="${{ github.event.issue.number }}"
          sha=$(git rev-parse --short HEAD)
          body=$(
            printf "✅ Test PR refreshed.\n\n- PR: %s\n- Commit: \`%s\`\n" \
              "${PR_URL}" "${sha}"
          )
          gh api repos/${REPO}/issues/${issue}/comments -f body="$body"

