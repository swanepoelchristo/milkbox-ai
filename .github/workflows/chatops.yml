name: ChatOps

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write
  discussions: read
  actions: read

jobs:
  chatops:
    if: github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/')
    runs-on: ubuntu-latest

    concurrency:
      group: chatops-${{ github.repository }}-${{ github.event.issue.number || github.event.pull_request.number || 'na' }}
      cancel-in-progress: false

    env:
      REPO: ${{ github.repository }}
      OWNER: ${{ github.repository_owner }}
      DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
      CHATOPS_TOKEN: ${{ secrets.CHATOPS_TOKEN }}
      COMMENT_BODY: ${{ github.event.comment.body }}
      AUTHOR_ASSOC: ${{ github.event.comment.author_association }}
      ISSUE_NUMBER: ${{ github.event.issue.number || github.event.pull_request.number }}

    steps:
      - name: Authorize caller (owner/member/collaborator only)
        run: |
          case "${AUTHOR_ASSOC}" in
            OWNER|MEMBER|COLLABORATOR) echo "Authorized";;
            *) echo "Not authorized: ${AUTHOR_ASSOC}"; exit 1;;
          esac

      - name: Checkout default branch (full history; no auto creds)
        uses: actions/checkout@v5
        with:
          ref: ${{ env.DEFAULT_BRANCH }}
          fetch-depth: 0
          persist-credentials: false

      - name: Use PAT for pushes (origin uses CHATOPS_TOKEN)
        run: |
          git config user.name  "milkbox-ai-bot"
          git config user.email "actions@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${{ env.CHATOPS_TOKEN }}@github.com/${{ env.REPO }}.git"

      # -------------------------------
      # /bootstrap-ci (create CI + pre-commit + dependabot)
      # -------------------------------
      - name: Bootstrap CI (create files & PR)
        if: contains(env.COMMENT_BODY, '/bootstrap-ci')
        run: |
          set -euo pipefail
          mkdir -p .github/workflows
          cat > .github/workflows/ci.yml <<'YAML'
          name: CI
          on:
            pull_request:
              types: [opened, synchronize, reopened, ready_for_review]
            push:
              branches: [main]
            workflow_dispatch:
          permissions:
            contents: read
          jobs:
            smoke:
              name: Smoke (Imports)
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v5
                - uses: actions/setup-python@v5
                  with: { python-version: '3.11' }
                - name: Install minimal deps
                  run: |
                    python -m pip install --upgrade pip
                    if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
                - name: Import sanity
                  run: python - <<'PY'
                    print("✅ Python imports OK (minimal)")
                    PY
            health:
              name: Repo Health
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v5
                - name: Basic repo checks
                  run: |
                    set -e
                    test -f CODEOWNERS || { echo "❌ Missing CODEOWNERS at repo root"; exit 1; }
                    echo "✅ CODEOWNERS present"
                - uses: actions/setup-python@v5
                  with: { python-version: '3.11' }
                - name: Install pre-commit
                  run: pip install pre-commit
                - name: Run pre-commit
                  run: pre-commit run --all-files --show-diff-on-failure
          YAML

          cat > .pre-commit-config.yaml <<'YAML'
          repos:
            - repo: https://github.com/pre-commit/pre-commit-hooks
              rev: v4.6.0
              hooks:
                - id: trailing-whitespace
                - id: end-of-file-fixer
                - id: mixed-line-ending
                - id: check-yaml
                - id: check-json
                - id: check-added-large-files
            - repo: https://github.com/astral-sh/ruff-pre-commit
              rev: v0.6.2
              hooks:
                - id: ruff
                  args: [--fix]
            - repo: https://github.com/pre-commit/mirrors-prettier
              rev: v3.3.3
              hooks:
                - id: prettier
          YAML

          mkdir -p .github
          cat > .github/dependabot.yml <<'YAML'
          version: 2
          updates:
            - package-ecosystem: "github-actions"
              directory: "/"
              schedule: { interval: "weekly" }
            - package-ecosystem: "npm"
              directory: "/"
              schedule: { interval: "weekly" }
          YAML

          git switch -C bot/bootstrap-ci
          git add -A
          if git diff --cached --quiet; then
            echo "No bootstrap changes to commit."
          else
            git commit -m "ci: bootstrap CI (Smoke & Repo Health), pre-commit, Dependabot"
          fi
          git push -u origin bot/bootstrap-ci

      - name: Open PR for bootstrap
        if: contains(env.COMMENT_BODY, '/bootstrap-ci')
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ env.CHATOPS_TOKEN }}
          base: ${{ env.DEFAULT_BRANCH }}
          branch: bot/bootstrap-ci
          title: "ci: register 'Smoke (Imports)' & 'Repo Health'; add pre-commit + Dependabot"
          body: "Opened by ChatOps."

      # -------------------------------
      # /set-required-checks (protect main)
      # -------------------------------
      - name: Set branch protection (main)
        if: contains(env.COMMENT_BODY, '/set-required-checks')
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.CHATOPS_TOKEN }}
          script: |
            const owner  = context.repo.owner;
            const repo   = context.repo.repo;
            const branch = context.payload.repository.default_branch || 'main';
            await github.request('PUT /repos/{owner}/{repo}/branches/{branch}/protection', {
              owner, repo, branch,
              required_status_checks: {
                strict: true,
                contexts: ['Smoke (Imports) / smoke (pull_request)', 'Repo Health / health (pull_request)'],
              },
              enforce_admins: false,
              required_pull_request_reviews: { required_approving_review_count: 1 },
              restrictions: null
            });

      # -------------------------------
      # /open-test-pr (reuse single PR)
      # -------------------------------
      - name: Prepare bot/test-pr from origin/main (always reset)
        if: contains(env.COMMENT_BODY, '/open-test-pr')
        run: |
          set -euo pipefail
          git fetch origin --prune
          git switch --detach "origin/${DEFAULT_BRANCH}"
          git branch -D bot/test-pr 2>/dev/null || true
          git switch -c bot/test-pr
          date > .ci_proof
          git add .ci_proof
          git commit -m "chore(test-pr): refresh automated test PR" || true

      - name: Push branch (force-with-lease; retry once)
        if: contains(env.COMMENT_BODY, '/open-test-pr')
        run: |
          set -euo pipefail
          for i in 1 2; do
            if git push --force-with-lease origin bot/test-pr; then exit 0; fi
            sleep 2
          done
          echo "Failed to push bot/test-pr"; exit 1

      - name: Create or update PR (reuse if open; reopen if closed)
        id: pr
        if: contains(env.COMMENT_BODY, '/open-test-pr')
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: ${{ env.DEFAULT_BRANCH }}
          branch: bot/test-pr
          title: "Test PR (bot)"
          body: "Automated test PR from ChatOps."

      - name: Comment result back to this issue
        if: contains(env.COMMENT_BODY, '/open-test-pr')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const num = '${{ steps.pr.outputs.pull-request-number }}' || '(unknown)';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ env.ISSUE_NUMBER }},
              body: `✅ Updated/created **PR #${num}** to trigger checks.`
            });

      # -------------------------------
      # /house-diagnose (Streamlit)
      # -------------------------------
      - name: Detect app entry
        id: entry
        if: contains(env.COMMENT_BODY, '/house-diagnose') || contains(env.COMMENT_BODY, '/house-fix')
        run: |
          set -euo pipefail
          for f in streamlit_app.py app.py main.py Home.py src/app.py; do
            [ -f "$f" ] && echo "path=$f" >> "$GITHUB_OUTPUT" && exit 0
          done
          echo "path=" >> "$GITHUB_OUTPUT"

      - name: Setup Python
        if: contains(env.COMMENT_BODY, '/house-diagnose') || contains(env.COMMENT_BODY, '/house-fix')
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install deps
        if: contains(env.COMMENT_BODY, '/house-diagnose') || contains(env.COMMENT_BODY, '/house-fix')
        run: |
          python -m pip install --upgrade pip wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          pip install streamlit || true

      - name: Diagnose app (headless import/run)
        id: diag
        if: contains(env.COMMENT_BODY, '/house-diagnose') || contains(env.COMMENT_BODY, '/house-fix')
        run: |
          set -euo pipefail
          python - <<'PY' > house_diag.log 2>&1 || true
          import os,runpy,traceback
          os.environ["STREAMLIT_SERVER_HEADLESS"]="true"
          missing=set(); other=False
          try:
              import streamlit
          except ModuleNotFoundError as e:
              missing.add((e.name or '').split('.')[0])
          path = "${{ steps.entry.outputs.path }}"
          if path:
              try:
                  runpy.run_path(path, run_name="__main__")
                  print("App executed without immediate exception")
              except ModuleNotFoundError as e:
                  missing.add((e.name or '').split('.')[0])
                  traceback.print_exc()
              except Exception:
                  other=True
                  traceback.print_exc()
          print("MISSING:", ",".join(sorted(x for x in missing if x)))
          print("OTHER_ERR:", other)
          PY
          tail -n 120 house_diag.log || true
          MISSING=$(grep '^MISSING:' -m1 house_diag.log | sed 's/^MISSING: *//')
          OTHER=$(grep '^OTHER_ERR:' -m1 house_diag.log | awk '{print $2}')
          echo "missing=$MISSING" >> "$GITHUB_OUTPUT"
          echo "other=$OTHER" >> "$GITHUB_OUTPUT"

      - name: Upload diagnostic log
        if: (contains(env.COMMENT_BODY, '/house-diagnose') || contains(env.COMMENT_BODY, '/house-fix'))
        uses: actions/upload-artifact@v4
        with:
          name: house_diag.log
          path: house_diag.log
          retention-days: 7

      - name: Comment diagnosis
        if: contains(env.COMMENT_BODY, '/house-diagnose')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const log = fs.existsSync('house_diag.log') ? fs.readFileSync('house_diag.log','utf8') : '';
            const tail = log.split('\n').slice(-80).join('\n');
            const entry = '${{ steps.entry.outputs.path }}' || 'not-found';
            const miss  = '${{ steps.diag.outputs.missing }}' || '(none)';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ env.ISSUE_NUMBER }},
              body:
                `**House Diagnose**\n\n` +
                `- Entry: \`${entry}\`\n` +
                `- Missing packages: \`${miss}\`\n\n` +
                `Log tail:\n\`\`\`\n${tail}\n\`\`\`\n` +
                `Full log attached as artifact **house_diag.log**.`
            });

      # -------------------------------
      # /house-fix → add missing pkgs to requirements.txt and open PR
      # -------------------------------
      - name: Prepare fix change
        if: contains(env.COMMENT_BODY, '/house-fix')
        id: prepare_fix
        run: |
          set -euo pipefail
          MISS="${{ steps.diag.outputs.missing }}"
          if [ -z "$MISS" ]; then
            echo "No missing modules detected — nothing to fix."
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          touch requirements.txt
          cp requirements.txt requirements.txt.bak

          # Add any missing packages (simple, case-insensitive check)
          for PKG in ${MISS//,/ }; do
            [ -z "$PKG" ] && continue
            if ! grep -i -q "^${PKG}\b" requirements.txt; then
              echo "$PKG" >> requirements.txt
            fi
          done

          if diff -u requirements.txt.bak requirements.txt >/dev/null 2>&1; then
            echo "No changes to requirements.txt"
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          git add requirements.txt
          echo "changed=true" >> "$GITHUB_OUTPUT"

      - name: Open PR with fix
        if: contains(env.COMMENT_BODY, '/house-fix') && steps.prepare_fix.outputs.changed == 'true'
        id: fixpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ env.CHATOPS_TOKEN }}
          base: ${{ env.DEFAULT_BRANCH }}
          branch: bot/house-fix-${{ github.run_id }}
          commit-message: "fix(streamlit): add missing packages to requirements.txt"
          title: "fix(streamlit): add missing packages to requirements.txt"
          body: |
            Detected missing packages via /house-diagnose and added them to `requirements.txt`.

            Missing: `${{ steps.diag.outputs.missing }}`
            Entry: `${{ steps.entry.outputs.path || 'not-found' }}`

            See artifact **house_diag.log** for the full error log.
          add-paths: |
            requirements.txt

      - name: Comment fix result
        if: always() && contains(env.COMMENT_BODY, '/house-fix')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const num = '${{ steps.fixpr.outputs.pull-request-number }}' || '(no changes)';
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ env.ISSUE_NUMBER }},
              body: `🔧 Fix PR: **#${num}**\nRun: ${runUrl}`
            });
