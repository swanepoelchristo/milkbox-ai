import io
import textwrap
import streamlit as st

def _md_escape(s: str) -> str:
    return s.replace("|", r"\|").strip()

def _lines(s: str) -> list[str]:
    return [ln.strip() for ln in (s or "").splitlines() if ln.strip()]

def render():
    st.header("üß∞ CV Builder (Basic)")
    st.caption("Safe, lightweight stub you can already use ‚Äî no external packages.")

    with st.form("cv_form", clear_on_submit=False):
        col1, col2 = st.columns(2)
        with col1:
            full_name = st.text_input("Full name")
            headline = st.text_input("Professional title / headline")
            location = st.text_input("Location")
        with col2:
            email = st.text_input("Email")
            phone = st.text_input("Phone (optional)")
            links = st.text_area("Links (one per line)", placeholder="https://linkedin.com/in/you\nhttps://github.com/you")

        summary = st.text_area(
            "Professional summary",
            placeholder="One or two punchy sentences about your impact and strengths.",
            height=100,
        )
        skills = st.text_area(
            "Skills (comma-separated)",
            placeholder="Python, Streamlit, SQL, Data Analysis, Customer Support",
        )

        st.markdown("**Experience** (one role per line: Company | Role | Dates | bullet; bullet; bullet)")
        experience_raw = st.text_area(
            "Example",
            value="Milk Roads AI | Data Technician | 2023‚ÄìPresent | Built Streamlit tools; Automated invoice parsing; Improved data quality",
            height=100,
        )

        st.markdown("**Education** (one per line: Institution | Degree | Years)")
        education_raw = st.text_area(
            "Example ",
            value="University of Pretoria | BSc Biochemistry | 2018‚Äì2021",
            height=80,
        )

        submitted = st.form_submit_button("Preview CV")

    if not submitted:
        st.info("Fill the fields and click **Preview CV**.")
        return

    # Parse inputs
    link_lines = _lines(links)
    skill_list = [s.strip() for s in (skills or "").split(",") if s.strip()]

    exp_rows = []
    for ln in _lines(experience_raw):
        parts = [p.strip() for p in ln.split("|")]
        if len(parts) < 3:
            st.warning(f"Experience line ignored (need at least Company | Role | Dates): {ln}")
            continue
        company, role, dates = parts[:3]
        bullets = []
        if len(parts) >= 4 and parts[3].strip():
            bullets = [b.strip() for b in parts[3].split(";") if b.strip()]
        exp_rows.append((company, role, dates, bullets))

    edu_rows = []
    for ln in _lines(education_raw):
        parts = [p.strip() for p in ln.split("|")]
        if len(parts) < 2:
            st.warning(f"Education line ignored (need Institution | Degree [| Years]): {ln}")
            continue
        institution, degree = parts[0], parts[1]
        years = parts[2] if len(parts) >= 3 else ""
        edu_rows.append((institution, degree, years))

    # Build Markdown CV (simple, ATS-friendly)
    md = io.StringIO()
    if full_name:
        md.write(f"# {full_name}\n")
    if headline:
        md.write(f"**{headline}**\n\n")

    contact_bits = [p for p in [location, email, phone] if p]
    if contact_bits or link_lines:
        md.write("".join([f"{bit}  \n" for bit in contact_bits]))
        for lk in link_lines:
            md.write(f"{lk}  \n")
        md.write("\n")

    if summary:
        md.write("## Summary\n")
        md.write(textwrap.fill(summary.strip(), width=100))
        md.write("\n\n")

    if skill_list:
        md.write("## Skills\n")
        md.write(", ".join(skill_list))
        md.write("\n\n")

    if exp_rows:
        md.write("## Experience\n")
        for company, role, dates, bullets in exp_rows:
            md.write(f"**{_md_escape(role)}** ‚Äî {_md_escape(company)} ({_md_escape(dates)})\n\n")
            for b in bullets:
                md.write(f"- {b}\n")
            md.write("\n")

    if edu_rows:
        md.write("## Education\n")
        for institution, degree, years in edu_rows:
            yrs = f" ({_md_escape(years)})" if years else ""
            md.write(f"- **{_md_escape(institution)}** ‚Äî {_md_escape(degree)}{yrs}\n")
        md.write("\n")

    cv_md = md.getvalue()

    st.subheader("Preview")
    st.markdown(cv_md)

    safe_name = (full_name or "cv").lower().replace(" ", "_")[:40]
    st.download_button(
        "‚¨áÔ∏è Download as Markdown",
        data=cv_md.encode("utf-8"),
        file_name=f"{safe_name}.md",
        mime="text/markdown",
    )

